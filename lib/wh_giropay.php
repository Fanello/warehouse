<?php

class wh_giropay {
    
    static $gp_notify_messages = [
        '4502' => 'Der Vorgang wurde vom Benutzer abgebrochen'
    ];

    static $gp_agecheck_messages = [
      '4020' => 'erfolgreich',
      '4021' => 'Alterscheck nicht durchführbar',
      '4022' => 'Alterscheck nicht erfolgreich'
    ];

    public function init_giropay() {

        if (rex::isDebugMode()) {
//            define('__GIROCHECKOUT_SDK_DEBUG__', true);
        }


        $cart = warehouse::get_cart();
        $user_data = warehouse::get_user_data();

        $merchantID = rex_config::get('warehouse', 'giropay_merchand_id');
        $projectID = rex_config::get('warehouse', 'giropay_project_id');
        $projectPassword = rex_config::get('warehouse', 'giropay_project_pw');
        
        $params = json_decode(rex_config::get('warehouse','paypal_getparams'),true);
        
        $db_id = warehouse::save_order_to_db();

        $request = new GiroCheckout_SDK_Request('giropayTransaction');
        $request->setSecret($projectPassword);
        $request->addParam('merchantId', $merchantID)
                ->addParam('projectId', $projectID)
                ->addParam('merchantTxId', $db_id)
                ->addParam('amount', (warehouse::get_cart_total() * 100))
                ->addParam('currency', rex_config::get('warehouse', 'currency'))
                ->addParam('purpose', 'Bestellung Webshop')
                ->addParam('bic', $user_data['giropay_bic'])
                ->addParam('info1Label', 'Bestellnr ')
                ->addParam('info1Text', $db_id)
                ->addParam('info2Label', 'Kunde ')
                ->addParam('info2Text', $user_data['firstname'].' '.$user_data['lastname'])
                ->addParam('urlRedirect', trim(rex::getServer(), '/') . rex_getUrl(rex_config::get('warehouse', 'giropay_page_redirect'), '', $params ?: [], '&'))
                ->addParam('urlNotify', trim(rex::getServer(), '/') . rex_getUrl(rex_config::get('warehouse', 'giropay_page_notify'), '', $params ?: [], '&'))
	    //the hash field is auto generated by the SDK
                ->submit();

        if ($request->requestHasSucceeded()) {
            warehouse::update_order($db_id, ['payment_id'=>$request->getResponseParam('reference')],['payment_type'=>'giropay','payment_id'=>'']);
            /*
            $request->getResponseParam('rc');
            $request->getResponseParam('msg');
            $request->getResponseParam('reference');
            $request->getResponseParam('redirect');
             */
            $request->redirectCustomerToPaymentProvider();
        } else {
            $request->getResponseParam('rc');
            echo '<p>' . $request->getResponseParam('msg') . '</p>';
            echo '<p><a href="' . rex_getUrl(rex_config::get('warehouse', 'address_page')) . '">Weiter ...</a></p>';
//                dump($request->getResponseParam('msg'));
            $request->getResponseMessage($request->getResponseParam('rc'), 'DE');
        }
    }
    
    
    /**
     * Aufruf über Notify Seite
     * 
     Response ok:
    * gcReference = 4650b695-7c70-4415-987d-860b9347bdf8
    * gcMerchantTxId = 1234567890
    * gcBackendTxId = SJZMNBUGQ4
    * gcAmount = 100
    * gcCurrency = EUR
    * gcResultPayment = 4000  // erfolgreich (4502 = abgebrochen)
    * gcResultAVS = 4020      // erfolgreich (4021 - nicht durchführbar, 4022 nicht erfolgreich)
    * gcHash = 9846f333598f22258c8d90b981601da2
    * 
    * 
   Response Abbruch:
    * gcReference = 7e51f472-f6a1-4f10-ac21-9fd5c51b0e6c
    * gcMerchantTxId = 1234567890
    * gcBackendTxId = SJZMQ8M9C4
    * gcAmount = 450
    * gcCurrency = EUR
    * gcResultPayment = 4502
    * gcResultAVS = 4021
    * gcHash = ef939526adb1622a3049cb1d6e5c74c9
     * 
     */
    public function check_response () {
        // Get Parameter auslesen
        
        
        // Erfolgsmail versenden
        
        $merchantID = rex_config::get('warehouse', 'giropay_merchand_id');
        $projectID = rex_config::get('warehouse', 'giropay_project_id');
        $projectPassword = rex_config::get('warehouse', 'giropay_project_pw');

        try {
            $notify = new GiroCheckout_SDK_Notify('giropayTransaction');
            $notify->setSecret($projectPassword);
            $notify->parseNotification($_GET);

            //check response and update transaction
            if ($notify->paymentSuccessful()) {
                $notify->getResponseParam('gcReference');
                $notify->getResponseParam('gcMerchantTxId');
                $notify->getResponseParam('gcBackendTxId');
                $notify->getResponseParam('gcAmount');
                $notify->getResponseParam('gcCurrency');
                $notify->getResponseParam('gcResultPayment');

                if ($notify->avsSuccessful()) {
                    $notify->getResponseParam('gcResultAVS');
                }
                
                $notify->sendOkStatus();
                
                // Update in db schreiben und Warenkorb wieder in Session laden für E-Mail Versand
                warehouse::giropay_approved($notify->getResponseParam('gcReference'), $notify->getResponseParam('gcResultAVS'));
                // Email schicken und Redirect zur Danke-Seite
                warehouse::send_notification_email($send_redirect = false, $order_id = $notify->getResponseParam('gcMerchantTxId'));
                
                
                /*
                $notify->setNotifyResponseParam('Result', 'OK');
                $notify->setNotifyResponseParam('ErrorMessage', '');
                $notify->setNotifyResponseParam('MailSent', '0');
                $notify->setNotifyResponseParam('OrderId', '1111');
                $notify->setNotifyResponseParam('CustomerId', '2222');
                echo $notify->getNotifyResponseStringJson();
                 * 
                 */
                exit;
            } else {
                $notify->getResponseParam('gcReference');
                $notify->getResponseParam('gcMerchantTxId');
                $notify->getResponseParam('gcBackendTxId');
                $notify->getResponseParam('gcResultPayment');
                $notify->getResponseMessage($notify->getResponseParam('gcResultPayment'), 'DE');

                $notify->sendOkStatus();
                $notify->setNotifyResponseParam('Result', 'OK');
                $notify->setNotifyResponseParam('ErrorMessage', '');
                $notify->setNotifyResponseParam('MailSent', '0');
                $notify->setNotifyResponseParam('OrderId', '1111');
                $notify->setNotifyResponseParam('CustomerId', '2222');
                rex_redirect(rex_config::get('warehouse','giropay_page_error'),'',['resultAVS'=>$notify->getResponseParam('resultAVS'),'gcResultPayment'=>$notify->getResponseParam('gcResultPayment')]);
//                echo $notify->getNotifyResponseStringJson();
                exit;
            }
        } catch (Exception $e) {

            $notify->sendBadRequestStatus();
            $notify->setNotifyResponseParam('Result', 'ERROR');
            $notify->setNotifyResponseParam('ErrorMessage', $e->getMessage());
            $notify->setNotifyResponseParam('MailSent', '0');
            $notify->setNotifyResponseParam('OrderId', '1111');
            $notify->setNotifyResponseParam('CustomerId', '2222');
            echo $notify->getNotifyResponseStringJson();
            exit;
        }
    }
    
    public static function giropay_redirect () {
        
        $projectPassword = rex_config::get('warehouse', 'giropay_project_pw');
        
        /*
         success=true
         secret=druffel
         gcReference=bba3fa17-1df8-4b17-a90c-39437a6a99b8
         gcMerchantTxId=35
         gcBackendTxId=SK03O1IPE4
         gcAmount=1290
         gcCurrency=EUR
         gcResultPayment=4502
         gcResultAVS=4021
         gcHash=72a3eb9795ee4eccfd7e50ac959a9f70
         * 
         * 
         * success=true&secret=druffel&gcReference=2dc2f77c-4bca-401a-8a2a-4f6b2d153383&gcMerchantTxId=46&gcBackendTxId=SK04U7JT91&gcAmount=1290&gcCurrency=EUR&gcResultPayment=4000&gcResultAVS=4020&gcHash=412b1e09ec1b46bde04a7e183345303f
         */
        try {
            $notify = new GiroCheckout_SDK_Notify('giropayTransaction');
            $notify->setSecret($projectPassword);
            $notify->parseNotification($_GET);

            //check response and update transaction
            if ($notify->paymentSuccessful()) {
                warehouse::clear_cart(); // der Warenkorb muss natürlich weg :-)
                rex_response::sendRedirect(rex_getUrl(rex_config::get('warehouse','thankyou_page'), '', json_decode(rex_config::get('warehouse','paypal_getparams'),true), '&'));
            } else {
                rex_redirect(rex_config::get('warehouse','giropay_page_error'),'',['resultAVS'=>$notify->getResponseParam('gcResultAVS'),'gcResultPayment'=>$notify->getResponseParam('gcResultPayment')]);
            }
        } catch (Exception $e) {
            if ($notify->getNotifyResponseStringJson()) {
                echo $notify->getNotifyResponseStringJson();
            } else {
                rex_redirect(rex_config::get('warehouse','giropay_page_error'),'',['resultAVS'=>$notify->getResponseParam('resultAVS'),'gcResultPayment'=>$notify->getResponseParam('gcResultPayment')]);                
            }
            exit;
        }        
    }

}
